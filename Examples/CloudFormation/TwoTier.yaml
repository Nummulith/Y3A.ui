AWSTemplateFormatVersion: 2010-09-09
Description: Lab stack
Parameters:
  CidrPrefix:
    Type: String
    Default: "10.0"
    Description: Enter the first two octets of the VPC CIDR block (e.g., "10.0")
Resources:

  # Common
  VPC:
    Type: 'AWS::EC2::VPC'
    Properties:
      Tags: [{Key: Name, Value: VPC}]
      CidrBlock: !Join
        - "/"
        - - !Join [".", [!Ref CidrPrefix, "0", "0"]]
          - "16"

  IGW:
    Type: 'AWS::EC2::InternetGateway'
    Properties:
      Tags: [{Key: Name, Value: IGW}]

  IGWAttach:
    Type: 'AWS::EC2::VPCGatewayAttachment'
    Properties:
      VpcId: !Ref VPC
      InternetGatewayId: !Ref IGW

  EIP:
    Type: AWS::EC2::EIP
    Properties:
      Tags: [{Key: Name, Value: 'Elastic IP'}]
      Domain: vpc      


## Public

# Public RT
  RouteTablePublic:
    Type: 'AWS::EC2::RouteTable'
    Properties:
      Tags: [{Key: Name, Value: 'Public RT'}]
      VpcId: !Ref VPC

  RoutePublic:
    Type: 'AWS::EC2::Route'
    Properties:
      RouteTableId: !Ref RouteTablePublic
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref IGW

# Public Subnet
  SubnetPublic:
    Type: 'AWS::EC2::Subnet'
    Properties:
        Tags: [{Key: Name, Value: 'Public SN'}]
        VpcId: !Ref VPC
        CidrBlock: !Join
          - "/"
          - - !Join [".", [!Ref CidrPrefix, "3", "0"]]
            - "24"
  SubnetPublicRouteTableAssociation:
    Type: 'AWS::EC2::SubnetRouteTableAssociation'
    Properties:
      SubnetId: !Ref SubnetPublic
      RouteTableId: !Ref RouteTablePublic

  # NAT GW
  NATGateway:
    Type: AWS::EC2::NatGateway
    Properties:
      Tags: [{Key: Name, Value: 'NAT GW'}]
      AllocationId: !GetAtt EIP.AllocationId
      SubnetId: !Ref SubnetPublic

  # Security group
  SecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      Tags: [{Key: Name, Value: 'IC2 access'}]
      GroupDescription: Default security group for the VPC
      VpcId: !Ref VPC
      
  SecurityGroupIngressHTTP:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
#      GroupId: !GetAtt SecurityGroup.GroupId
      GroupId: !Ref SecurityGroup
      IpProtocol: tcp
      FromPort: 80
      ToPort: 80
      CidrIp: 0.0.0.0/0

  SecurityGroupIngressSSH:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
#      GroupId: !GetAtt SecurityGroup.GroupId
      GroupId: !Ref SecurityGroup
      IpProtocol: tcp
      FromPort: 22
      ToPort: 22
      CidrIp: 0.0.0.0/0

  # # Public EC2
  # EC2Public:
  #   Type: AWS::EC2::Instance
  #   Properties:
  #     Tags: [{Key: Name, Value: 'Public EC2'}]
  #     ImageId: ami-09e647bf7a368e505 # Amazon Linux 2023 AMI 2023.4.20240528.0 x86_64 HVM kernel-6.1
  #     InstanceType: t2.micro
  #     KeyName: key-Pavel
  #     #SubnetId: !Ref SubnetPublic
  #     NetworkInterfaces:
  #       - AssociatePublicIpAddress: true
  #         DeviceIndex: 0
  #         DeleteOnTermination: true
  #         SubnetId: !Ref SubnetPublic
  #         GroupSet:
  #           - !Ref SecurityGroupHTTP
  #     UserData: !Base64 |
  #       #!/bin/bash -ex 
  #       yum -y update 
  #       yum -y install httpd
  #       systemctl enable httpd
  #       systemctl start httpd
  #       echo '<html><h1>Hello From Your Web Server!</h1></html>' > /var/www/html/index.html 


## Private

# Private RT
  RouteTablePrivat:
    Type: 'AWS::EC2::RouteTable'
    Properties:
      Tags: [{Key: Name, Value: 'Private RT'}]
      VpcId: !Ref VPC
      
  RoutePrivate:
    Type: 'AWS::EC2::Route'
    Properties:
      RouteTableId: !Ref RouteTablePrivat
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId: !Ref NATGateway

# Private subnet
  SubnetPrivate:
    Type: 'AWS::EC2::Subnet'
    Properties:
        Tags: [{Key: Name, Value: 'Private SN'}]
        VpcId: !Ref VPC
        CidrBlock: !Join
          - "/"
          - - !Join [".", [!Ref CidrPrefix, "1", "0"]]
            - "24"

  SubnetPrivateRouteTableAssociation:
    Type: 'AWS::EC2::SubnetRouteTableAssociation'
    Properties:
      SubnetId: !Ref SubnetPrivate
      RouteTableId: !Ref RouteTablePrivat


  # # Private EC2
  # EC2Private:
  #   Type: AWS::EC2::Instance
  #   Properties:
  #     Tags: [{Key: Name, Value: 'Private EC2'}]
  #     ImageId: ami-09e647bf7a368e505 # Amazon Linux 2023 AMI 2023.4.20240528.0 x86_64 HVM kernel-6.1
  #     InstanceType: t2.micro
  #     KeyName: key-Pavel
  #     SubnetId: !Ref SubnetPrivate
  #     UserData: !Base64 |
  #         #!/bin/bash -xe
  #         yum update -y
  #         yum install git -y